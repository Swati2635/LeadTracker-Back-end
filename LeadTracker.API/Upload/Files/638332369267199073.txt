Controller


using LeadTracker.API.Extensions;
using LeadTracker.Application.IService;
using LeadTracker.BusinessLayer.IService;
using LeadTracker.Core.DTO;
using LeadTracker.Infrastructure;
using LeadTracker.Infrastructure.IRepository;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace LeadTracker.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class LoginController : BaseController
    {

        public IConfiguration _configuration;

        private readonly ILoginService _loginService;


        public LoginController(IConfiguration config, ILoginService loginService)
        {
            _configuration = config;

            _loginService = loginService;


        }
        [AllowAnonymous]
        [HttpPost]
        public async Task<ActionResult> Post(LoginDTO _userData)
        {

            if (_userData != null && _userData.Mobile != null && _userData.Password != null)
            {
                // Authenticate the user with the provided credentials
                var user = await _loginService.GetUser(_userData.Mobile, _userData.Password).ConfigureAwait(false);

                if (user != null)
                {
                    // User authenticated successfully; create claims for the JWT
                    var tokenHandler = new JwtSecurityTokenHandler();
                    var key = Encoding.ASCII.GetBytes(_configuration["Jwt:Key"]);
                    var tokenDescriptor = new SecurityTokenDescriptor
                    {
                        //Subject = new ClaimsIdentity(new[] { new Claim("UserId", user.UserId.ToString()) }),
                        Subject = new ClaimsIdentity(new[]
                       {
                          new Claim("EmployeeId", user.EmployeeId.ToString()),
                          new Claim("Name", user.Name),
                          new Claim("EmailId", user.EmailId),
                          new Claim("UserName", user.UserName),
                          new Claim("OrgId", user.OrgId.ToString()),
                          new Claim(JwtRegisteredClaimNames.Aud, _configuration["Jwt:Audience"]),
                          new Claim(JwtRegisteredClaimNames.Iss, _configuration["Jwt:Issuer"])
                          

                       }),
                        Expires = DateTime.UtcNow.AddYears(1),
                        SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature),
                        Audience = _configuration["Jwt:Audience"],
                        Issuer = _configuration["Jwt:Issuer"]
                    };
                    var token = tokenHandler.CreateToken(tokenDescriptor);
                    // return Ok(tokenHandler.WriteToken(token));//.ToString();
                    return Ok(new TokenDTO() {Token = tokenHandler.WriteToken(token), User = user });
                }
                else
                {
                    return Unauthorized();
                }
            }
            else
            {
                return Unauthorized();
            }

        }

    }
}






"Program.cs"


using AutoMapper;
using LeadTracker.API;
using LeadTracker.API.Extensions;
using LeadTracker.Application.IService;
using LeadTracker.Application.Service;
using LeadTracker.BusinessLayer.IService;
using LeadTracker.BusinessLayer.Service;
using LeadTracker.Core.DTO;
using LeadTracker.Core.Extension;
using LeadTracker.Infrastructure;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Http.Connections;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.CodeDom;
using System.Configuration;
using System.Text;



var environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");

//var config = GetConfiguration();

var builder = WebApplication.CreateBuilder(args);

var configuration = BuildConfiguration();

builder.Configuration.Bind(configuration);

var _appSetting = new AppSetting();

// Add services to the container.


builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(options =>
{
    options.SaveToken = true;
    options.RequireHttpsMetadata = false;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = false,
        ValidateIssuerSigningKey = true,
        ValidAudience = configuration["Jwt:Audience"],
        ValidIssuer = configuration["Jwt:Issuer"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["Jwt:Key"]))
    };
});

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen( c =>
{
    // ...

    // Add a security definition for JWT
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        In = ParameterLocation.Header,
        Description = "Please enter a valid token",
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        BearerFormat = "JWT",
        Scheme = "Bearer"
    });


    //Add a global security requirement for JWT

    c.AddSecurityRequirement(new OpenApiSecurityRequirement
   {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] { }
        }
   });
}
);



#region DBContext
var connectionOptions = new ConnectionOptions();

builder.Configuration.GetSection("ConnectionOptions").Bind(_appSetting);

builder.Services.AddDbContext<LeadTrackerContext>(options => options.UseSqlServer(_appSetting.DbConnection));
#endregion



#region Mapper, Repositories and Services

builder.Services.AddAutoMapper(typeof(MappingProfile), typeof(MappingProfile));
builder.Services.AddRepositories();
builder.Services.AddServices();
#endregion

builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowSpecificOrigin", builder =>
    {
        builder.AllowAnyOrigin()
               .AllowAnyHeader()
               .AllowAnyMethod();
    });
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
app.UseCors("AllowSpecificOrigin");
app.UseHttpsRedirection();
app.UseCors(policy => policy.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin());
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();
app.Run();

IConfiguration BuildConfiguration()
{
    var configurationBuilder = new ConfigurationBuilder()
        .SetBasePath(Directory.GetCurrentDirectory())
        .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
        .AddJsonFile($"appsettings.{environment}.json", optional: false, reloadOnChange: true);

    return configurationBuilder.Build();
}
